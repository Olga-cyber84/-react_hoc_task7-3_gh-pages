{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["sortedFunc","props","i","list","length","wasSwap","j","Date","date","getTime","temp","Table","UpdSortTable","console","log","map","item","amount","nanoid","sorted","this","React","Component","groupOnPeriod","period","uniqDate","indexOf","push","sum","newProps","uniqItem","forEach","Number","UpdMonthTable","groupedAmount","listOfMonthsYears","month","toLocaleString","year","getFullYear","convertDateToMonthYear","withGroupedMonthYear","UpdYearTable","listOfYears","convertDateToYear","withGroupedYear","App","state","fetch","process","then","response","json","setState","id","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6d6bd7c1.chunk.js","sourcesContent":["import React from 'react';\nimport {nanoid} from 'nanoid';\n\nfunction YearTable(props) {\n    console.log('YearTable', props);\n    return (\n        <div>\n            <h2>Year Table</h2>\n            <table>\n                <tbody>\n                  <tr>\n                      <th>Year</th>\n                      <th>Amount</th>\n                  </tr>\n                  {props.list.map(item => (\n                      <tr>\n                          <td>{item.year}</td>\n                          <td>{item.amount}</td>\n                      </tr>\n                  ))}\n                </tbody>\n            </table>\n        </div>\n    );\n};\n\nfunction SortTable(props) {\n    console.log('SortTable', props);\n    return (\n        <div>\n            <h2>Sort Table</h2>\n            <table>\n              <tbody>\n                <tr>\n                    <th>Date</th>\n                    <th>Amount</th>\n                </tr>\n                {props.list.map(item => (\n                    <tr key={nanoid()}>\n                        <td>{item.date}</td>\n                        <td>{item.amount}</td>\n                    </tr>\n                ))}\n                </tbody>\n            </table>\n        </div>\n    );\n};\n\nfunction MonthTable(props) {\n    console.log('MonthTable', props);\n    return (\n        <div>\n            <h2>Month Table</h2>\n            <table>\n              <tbody>\n                <tr>\n                    <th>Month</th>\n                    <th>Amount</th>\n                </tr>\n                {props.list.map(item => (\n                    <tr>\n                        <td>{item.month}</td>\n                        <td>{item.amount}</td>\n                    </tr>\n                ))}\n              </tbody>\n            </table>\n        </div>\n    );\n};\n\nfunction sortedFunc(props) {\n  for (let i = 0; i < props.list.length; i++) { \n    let wasSwap = false;\n    for (let j = 0; j < props.list.length - i - 1; j++) { \n        if (new Date(props.list[j].date).getTime() < new Date(props.list[j + 1].date).getTime()) { \n            let temp = props.list[j + 1]; \n            props.list[j + 1] = props.list[j]; \n            props.list[j]= temp;\n            wasSwap = true; \n        }\n    }\n    if (!wasSwap) break;\n  } \n  return props     \n}\n\nfunction withSorted(Table) {  \n  return class extends React.Component { \n    render() {\n      const unsorted = this.props;\n      const sorted = sortedFunc(unsorted);\n      return <Table {...sorted} />\n    }\n  }\n}\nconst UpdSortTable = withSorted(SortTable);\n\nfunction convertDateToMonthYear(props) { /*конвертация даты в формат 'Месяц год' */\n  let listOfMonthsYears = [];\n  props.list.map(item => {\n    const month = new Date(item.date).toLocaleString('en-us', { month: 'short'});\n    const year = new Date(item.date).getFullYear()\n    listOfMonthsYears.push({'month': `${month} ${year}`, 'amount': item.amount})\n  })  \n  return {'list': listOfMonthsYears}\n}\n\nfunction groupOnPeriod(props, period) { /*группировка по периоду*/\n  console.log(period)\n  const uniqDate = [];\n    props.list.map(item => {\n      uniqDate.indexOf(item[period]) < 0 && uniqDate.push(item[period]);\n  })\n  let sum = 0;\n  let newProps = []\n  uniqDate.map(uniqItem => {\n    sum = 0\n    props.list.forEach(item => {\n      if (item[period] === uniqItem) {\n        sum += Number(item.amount)\n      }\n    })\n    newProps.push({[period]: uniqItem,  'amount': sum})    \n  })\n  return {'list': newProps}\n}\n\nfunction convertDateToYear(props) { /*конвертация даты в формат 'Год' */\n  let listOfYears = [];\n  props.list.map(item => {\n    console.log(item)\n    const year = new Date(item.date).getFullYear()\n    console.log(year)\n    listOfYears.push({'year': `${year}`, 'amount': item.amount})\n  })\n  console.log( {'list': listOfYears})\n  return {'list': listOfYears}\n}\n\nfunction withGroupedMonthYear(Table) {\n  return class extends React.Component { \n    render() {\n      const sortedDates = sortedFunc(this.props)\n      const sortedMonthYear = convertDateToMonthYear(sortedDates);\n      const groupedAmount = groupOnPeriod(sortedMonthYear, 'month')\n      return <Table {...groupedAmount} />\n    }\n  }\n}\n\nconst UpdMonthTable = withGroupedMonthYear(MonthTable);\n\nfunction withGroupedYear(Table) {\n  return class extends React.Component { \n    render() {\n      const sortedDates = sortedFunc(this.props)\n      const sortedYear = convertDateToYear(sortedDates);\n      const groupedAmount = groupOnPeriod(sortedYear, 'year')\n      return <Table {...groupedAmount} />\n    }\n  }\n}\nconst UpdYearTable = withGroupedYear(YearTable);\n// TODO:\n// 1. Загрузите данные с помощью fetch: https://raw.githubusercontent.com/netology-code/ra16-homeworks/master/hoc/aggregation/data/data.json\n// 2. Не забудьте вынести URL в переменные окружения (не хардкодьте их здесь)\n// 3. Положите их в state\n\nexport default class App extends React.Component {\n    state = {\n        list: []\n    };\n    componentDidMount() {\n      fetch(process.env.REACT_APP_CURRENCY_URL)\n        .then(response => response.json())\n        .then(list => this.setState(list))\n    }\n\n    render() {\n        const {list} = this.state;\n        return (\n            <div id=\"app\">\n                <UpdMonthTable list={list} />\n                <UpdYearTable list={list} />\n                <UpdSortTable list={list} />\n            </div>\n        );\n    }\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}